{
  "swagger": "2.0",
  "info": {
    "title": "Event Management System API - CSE 341",
    "description": "Team 13 Final Project - API for managing events\n\n**Contributors**:\n- Berick Smith\n- Lenora Stevens\n- Ramon Felipe Castano\n- Livia Costa Lira de Medeiros\n\nThis API provides various endpoints for accessing resources. \n\n**Authentication Required**: Endpoints marked with a padlock icon are restricted and can only be accessed after logging in via GitHub using OAuth. \n\n**OAuth Login:** Authentication is handled via GitHub OAuth. To connect, use the following endpoints:\n\n- **Login**: https://cse-341-team13.onrender.com/github - Initiates the OAuth process with GitHub. \n- **Logout**: https://cse-341-team13.onrender.com/logout - Ends your session.",
    "version": "1.0.0"
  },
  "host": "cse-341-team13.onrender.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://github.com/login/oauth/authorize",
      "tokenUrl": "https://github.com/login/oauth/access_token",
      "scopes": {
        "read": "Grants read access",
        "write": "Grants write access"
      }
    }
  },
  "paths": {
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "GET all users",
        "description": "This endpoint returns a list of all users.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "CREATE a new user (OAuth required)",
        "description": "This endpoint creates a new user with the provided details.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fname": {
                  "type": "string",
                  "example": "John"
                },
                "lname": {
                  "type": "string",
                  "example": "Doe"
                },
                "email": {
                  "type": "string",
                  "example": "john.doe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                },
                "role": {
                  "type": "string",
                  "example": "user"
                },
                "status": {
                  "type": "string",
                  "example": "active"
                },
                "dob": {
                  "type": "string",
                  "example": "1990-01-01"
                },
                "location": {
                  "type": "string",
                  "example": "New York"
                }
              },
              "required": [
                "fname",
                "lname",
                "email",
                "password",
                "role",
                "status",
                "dob",
                "location"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "GET a user by ID",
        "description": "This endpoint returns a single user based on the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "UPDATE a user by ID (OAuth required)",
        "description": "This endpoint updates a user based on the provided ID and data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated user data",
            "schema": {
              "type": "object",
              "properties": {
                "fname": {
                  "type": "string",
                  "example": "John"
                },
                "lname": {
                  "type": "string",
                  "example": "Doe"
                },
                "email": {
                  "type": "string",
                  "example": "john.doe@example.com"
                },
                "role": {
                  "type": "string",
                  "example": "admin"
                },
                "status": {
                  "type": "string",
                  "example": "active"
                },
                "dob": {
                  "type": "string",
                  "example": "1990-01-01"
                },
                "location": {
                  "type": "string",
                  "example": "New York"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "DELETE a user by ID (OAuth required)",
        "description": "This endpoint deletes a user based on the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      }
    },
    "/events/": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "GET all events",
        "description": "This endpoint returns a list of all events.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "CREATE a new event (OAuth required)",
        "description": "This endpoint creates a new event with the provided details.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Event data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Fun Event"
                },
                "location": {
                  "type": "string",
                  "example": "Where"
                },
                "date": {
                  "type": "string",
                  "example": "2024-10-29"
                },
                "time": {
                  "type": "string",
                  "example": "08:00 PM"
                },
                "venue": {
                  "type": "string",
                  "example": "Facility Name"
                }
              },
              "required": [
                "name",
                "location",
                "date",
                "time",
                "venue"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "GET an event by ID",
        "description": "This endpoint returns a single event based on the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "UPDATE an event by ID (OAuth required)",
        "description": "This endpoint updates an event based on the provided ID and data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Event ID"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated event data",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Fun Event"
                },
                "location": {
                  "type": "string",
                  "example": "Where"
                },
                "date": {
                  "type": "string",
                  "example": "YYYY-MM-DD"
                },
                "time": {
                  "type": "string",
                  "example": "hh:mm AM/PM (12-hour format)"
                },
                "venue": {
                  "type": "string",
                  "example": "Name of Facility"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "DELETE an event by ID (OAuth required)",
        "description": "This endpoint deletes an event based on the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      }
    },
    "/tickets/": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "GET all tickets",
        "description": "This endpoint returns a list of all tickets.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "CREATE a new ticket (OAuth required)",
        "description": "This endpoint creates a new ticket with the provided details.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Ticket data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "event_id": {
                  "type": "string",
                  "example": "603e48a3e7abf40d1b0d9c7d"
                },
                "user_id": {
                  "type": "string",
                  "example": "603e48a3e7abf40d1b0d9c7e"
                },
                "ticket_number": {
                  "type": "string",
                  "example": "123456789"
                },
                "price": {
                  "type": "number",
                  "example": 50
                },
                "date": {
                  "type": "string",
                  "example": "2024-12-25"
                },
                "status": {
                  "type": "string",
                  "example": "active"
                }
              },
              "required": [
                "event_id",
                "user_id",
                "ticket_number",
                "price",
                "date",
                "status"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      }
    },
    "/tickets/{id}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "GET a ticket by ID",
        "description": "This endpoint returns a single ticket based on the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Ticket ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "UPDATE a ticket by ID (OAuth required)",
        "description": "This endpoint updates a ticket based on the provided ID and data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Ticket ID"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated ticket data",
            "schema": {
              "type": "object",
              "properties": {
                "ticket_number": {
                  "type": "string",
                  "example": "123456789"
                },
                "price": {
                  "type": "number",
                  "example": 50
                },
                "status": {
                  "type": "string",
                  "example": "active"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "DELETE a ticket by ID (OAuth required)",
        "description": "This endpoint deletes a ticket based on the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Ticket ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ]
      }
    },
    "/speakers/": {
      "get": {
        "tags": [
          "Speakers"
        ],
        "summary": "GET all speakers",
        "description": "This endpoint returns a list of all speakers.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Speakers"
        ],
        "summary": "CREATE a speaker (OAuth required)",
        "description": "Creates a new speaker given the required data.<br>  Requires the following fields: name, bio, photo_url, email, event, specialization, availability, location.<br>   Returns an object containing the id created.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Speaker data to be created",
            "required": true,
            "schema": {
              "required": [
                "name",
                "bio",
                "photo_url",
                "email",
                "event",
                "specialization",
                "availability",
                "location"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Marcela Santana"
                },
                "bio": {
                  "type": "string",
                  "example": "Marcela is a renowned nutritionist with over 10 years of experience promoting healthy lifestyles."
                },
                "photo_url": {
                  "type": "string",
                  "format": "url",
                  "example": "https://example.com/marce.jpg"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "marcela@example.com"
                },
                "event": {
                  "type": "string",
                  "example": "670de14cd436d85952af4c3f"
                },
                "specialization": {
                  "type": "string",
                  "example": "Sports Nutrition"
                },
                "availability": {
                  "type": "boolean",
                  "example": true
                },
                "location": {
                  "type": "string",
                  "example": "Austin, TX"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write"
            ]
          }
        ]
      }
    },
    "/speakers/{id}": {
      "get": {
        "tags": [
          "Speakers"
        ],
        "summary": "GET a speaker by ID",
        "description": "Gets a single speaker given the id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the speaker to retrieve",
            "example": "6500002e6f1a2b6d9c5e790a"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Speakers"
        ],
        "summary": "UPDATE a speaker by ID (OAuth required)",
        "description": "Updates the speaker info given the id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the speaker to be updated",
            "example": "6500002e6f1a2b6d9c5e790a"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Speaker data to be updated",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Marcela Santana"
                },
                "bio": {
                  "type": "string",
                  "example": "Marcela is a renowned nutritionist with over 10 years of experience promoting healthy lifestyles."
                },
                "photo_url": {
                  "type": "string",
                  "format": "url",
                  "example": "https://example.com/marce.jpg"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "marcela@example.com"
                },
                "event": {
                  "type": "string",
                  "example": "670de14cd436d85952af4c3f"
                },
                "specialization": {
                  "type": "string",
                  "example": "Sports Nutrition"
                },
                "availability": {
                  "type": "boolean",
                  "example": true
                },
                "location": {
                  "type": "string",
                  "example": "Austin, TX"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Speakers"
        ],
        "summary": "DELETE a speaker by ID (OAuth required)",
        "description": "Deletes the speaker info given the id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the speaker to delete",
            "example": "6500002e6f1a2b6d9c5e790a"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write"
            ]
          }
        ]
      }
    }
  }
}